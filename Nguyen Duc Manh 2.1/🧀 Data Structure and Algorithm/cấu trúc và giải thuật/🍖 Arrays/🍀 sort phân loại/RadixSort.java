/*
 * S·∫Øp x·∫øp theo c∆° s·ªë
 * Thu·∫≠t to√°n Radix Sort s·∫Øp x·∫øp m·ªôt m·∫£ng theo t·ª´ng ch·ªØ s·ªë ri√™ng l·∫ª, b·∫Øt ƒë·∫ßu t·ª´
 * ch·ªØ s·ªë √≠t quan tr·ªçng nh·∫•t (ch·ªØ s·ªë ngo√†i c√πng b√™n ph·∫£i).
 */

public class RadixSort {

    public static void bubbleSort(int[] arr) {
        int n = arr.length;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n - i - 1; j++) {
                if (arr[j] > arr[j + 1]) {
                    int temp = arr[j];
                    arr[j] = arr[j + 1];
                    arr[j + 1] = temp;
                }
            }
        }
    }

    public static void radixSortWithBubbleSort(int[] arr) {
        int maxVal = arr[0];
        for (int num : arr) {
            if (num > maxVal)
                maxVal = num;
        }

        int exp = 1;
        while (maxVal / exp > 0) {
            int[][] radixArray = new int[10][arr.length];
            int[] count = new int[10];

            for (int num : arr) {
                int radixIndex = (num / exp) % 10;
                radixArray[radixIndex][count[radixIndex]++] = num;
            }

            for (int i = 0; i < 10; i++) {
                int[] tempArray = new int[count[i]];
                System.arraycopy(radixArray[i], 0, tempArray, 0, count[i]);
                bubbleSort(tempArray);
                System.arraycopy(tempArray, 0, radixArray[i], 0, count[i]);
            }

            int index = 0;
            for (int i = 0; i < 10; i++) {
                for (int j = 0; j < count[i]; j++) {
                    arr[index++] = radixArray[i][j];
                }
            }

            exp *= 10;
        }
    }

    public static void main(String[] args) {
        int[] myArray = { 170, 45, 75, 90, 802, 24, 2, 66 };
        System.out.print("Original array: ");
        for (int num : myArray)
            System.out.print(num + " ");
        System.out.println();

        radixSortWithBubbleSort(myArray);

        System.out.print("Sorted array: ");
        for (int num : myArray)
            System.out.print(num + " ");
        System.out.println();
    }
}

/*
 * 
 * 
 * S·∫Øp x·∫øp theo c∆° s·ªë (Radix Sort) l√† m·ªôt thu·∫≠t to√°n s·∫Øp x·∫øp kh√¥ng so s√°nh, s·ª≠
 * d·ª•ng c√°c ƒë·∫∑c t√≠nh c·ªßa s·ªë h·ªçc ƒë·ªÉ s·∫Øp x·∫øp c√°c ph·∫ßn t·ª≠ theo t·ª´ng ch·ªØ s·ªë c·ªßa
 * ch√∫ng. Thu·∫≠t to√°n n√†y ho·∫°t ƒë·ªông hi·ªáu qu·∫£ khi c√°c ph·∫ßn t·ª≠ c√≥ ƒë·ªô d√†i c·ªë ƒë·ªãnh
 * ho·∫∑c kh√¥ng qu√° l·ªõn, ƒë·∫∑c bi·ªát khi c√°c gi√° tr·ªã trong d√£y c·∫ßn s·∫Øp x·∫øp l√† c√°c s·ªë
 * nguy√™n.
 * 
 * ƒê·ªô ph·ª©c t·∫°p c·ªßa S·∫Øp x·∫øp theo c∆° s·ªë:
 * S·∫Øp x·∫øp theo c∆° s·ªë s·ª≠ d·ª•ng m·ªôt thu·∫≠t to√°n ph·ª• g·ªçi l√† s·∫Øp x·∫øp ƒë·∫øm (Counting
 * Sort) ƒë·ªÉ s·∫Øp x·∫øp c√°c ph·∫ßn t·ª≠ theo t·ª´ng ch·ªØ s·ªë. V√¨ v·∫≠y, ƒë·ªô ph·ª©c t·∫°p c·ªßa Radix
 * Sort ph·ª• thu·ªôc v√†o s·ªë l∆∞·ª£ng ch·ªØ s·ªë c·ªßa c√°c ph·∫ßn t·ª≠ v√† c√°ch th·ª©c s·∫Øp x·∫øp c√°c
 * ch·ªØ s·ªë.
 * 
 * ƒê·ªô ph·ª©c t·∫°p th·ªùi gian c·ªßa Radix Sort:
 * ƒê·ªô ph·ª©c t·∫°p trong m·ªói b∆∞·ªõc s·∫Øp x·∫øp ch·ªØ s·ªë:
 * 
 * O(n + k), trong ƒë√≥:
 * ùëõ
 * n l√† s·ªë l∆∞·ª£ng ph·∫ßn t·ª≠ c·∫ßn s·∫Øp x·∫øp.
 * ùëò
 * k l√† ph·∫°m vi gi√° tr·ªã c·ªßa m·ªói ch·ªØ s·ªë (t·ª©c l√† gi√° tr·ªã l·ªõn nh·∫•t c√≥ th·ªÉ c√≥ c·ªßa
 * m·ªôt ch·ªØ s·ªë, v√≠ d·ª• v·ªõi c√°c s·ªë th·∫≠p ph√¢n,
 * ùëò
 * =
 * 10
 * k=10).
 * ƒê·ªô ph·ª©c t·∫°p t·ªïng c·ªông:
 * 
 * Radix Sort th·ª±c hi·ªán d b∆∞·ªõc (v·ªõi
 * ùëë
 * d l√† s·ªë ch·ªØ s·ªë t·ªëi ƒëa c·ªßa ph·∫ßn t·ª≠ l·ªõn nh·∫•t trong d√£y).
 * ƒê·ªô ph·ª©c t·∫°p t·ªïng c·ªông c·ªßa Radix Sort l√† O(d \cdot (n + k)).
 * T·ªïng k·∫øt:
 * ƒê·ªô ph·ª©c t·∫°p th·ªùi gian: O(d \cdot (n + k))
 * ùëë
 * d l√† s·ªë ch·ªØ s·ªë t·ªëi ƒëa c·ªßa ph·∫ßn t·ª≠ (t·ª©c l√† ƒë·ªô d√†i c·ªßa c√°c s·ªë trong c∆° s·ªü s·ªë m√†
 * b·∫°n ƒëang s·ª≠ d·ª•ng, v√≠ d·ª•: s·ªë th·∫≠p ph√¢n c√≥ th·ªÉ c√≥
 * ùëë
 * d ch·ªØ s·ªë).
 * ùëõ
 * n l√† s·ªë l∆∞·ª£ng ph·∫ßn t·ª≠ trong d√£y.
 * ùëò
 * k l√† ph·∫°m vi gi√° tr·ªã c·ªßa m·ªói ch·ªØ s·ªë (th∆∞·ªùng l√† 10 cho h·ªá th·∫≠p ph√¢n, 256 cho
 * c√°c k√Ω t·ª± ASCII, v.v.).
 * ƒê·ªô ph·ª©c t·∫°p kh√¥ng gian:
 * O(n + k), v√¨ Radix Sort y√™u c·∫ßu kh√¥ng gian b·ªô nh·ªõ ƒë·ªÉ l∆∞u tr·ªØ c√°c m·∫£ng ph·ª• nh∆∞
 * m·∫£ng ƒë·∫øm (ƒë∆∞·ª£c s·ª≠ d·ª•ng trong Counting Sort).
 */