/*
 * S·∫Øp x·∫øp nhanh
 * ƒê√∫ng nh∆∞ t√™n g·ªçi, Quicksort l√† m·ªôt trong nh·ªØng thu·∫≠t to√°n s·∫Øp x·∫øp nhanh nh·∫•t.
 * 
 * Thu·∫≠t to√°n Quicksort l·∫•y m·ªôt m·∫£ng gi√° tr·ªã, ch·ªçn m·ªôt trong c√°c gi√° tr·ªã l√†m
 * ph·∫ßn t·ª≠
 * 'tr·ª•c' v√† di chuy·ªÉn c√°c gi√° tr·ªã kh√°c sao cho c√°c gi√° tr·ªã th·∫•p h∆°n n·∫±m ·ªü b√™n
 * tr√°i ph·∫ßn
 * t·ª≠ tr·ª•c v√† c√°c gi√° tr·ªã cao h∆°n n·∫±m ·ªü b√™n ph·∫£i ph·∫ßn t·ª≠ tr·ª•c.
 */

public class Quicksort {
    public static void main(String[] args) {
        int[] myArray = { 64, 34, 25, 12, 22, 11, 90, 5 };
        quicksort(myArray, 0, myArray.length - 1);

        System.out.print("Sorted array: ");
        for (int value : myArray) {
            System.out.print(value + " ");
        }
    }

    public static void quicksort(int[] array, int low, int high) {
        if (low < high) {
            int pivotIndex = partition(array, low, high);
            quicksort(array, low, pivotIndex - 1);
            quicksort(array, pivotIndex + 1, high);
        }
    }

    public static int partition(int[] array, int low, int high) {
        int pivot = array[high];
        int i = low - 1;

        for (int j = low; j < high; j++) {
            if (array[j] <= pivot) {
                i++;
                int temp = array[i];
                array[i] = array[j];
                array[j] = temp;
            }
        }

        int temp = array[i + 1];
        array[i + 1] = array[high];
        array[high] = temp;
        return i + 1;
    }
}

/*
 * Tr∆∞·ªùng h·ª£p t·ªët nh·∫•t (Best case):
 * 
 * Tr∆∞·ªùng h·ª£p n√†y x·∫£y ra khi thu·∫≠t to√°n lu√¥n chia danh s√°ch th√†nh hai ph·∫ßn b·∫±ng
 * nhau ho·∫∑c g·∫ßn b·∫±ng nhau (pivot chia ƒë·ªÅu danh s√°ch th√†nh hai ph·∫ßn).
 * ƒê·ªô ph·ª©c t·∫°p trong tr∆∞·ªùng h·ª£p n√†y l√† O(n log n), trong ƒë√≥
 * ùëõ
 * n l√† s·ªë ph·∫ßn t·ª≠ trong danh s√°ch.
 * Tr∆∞·ªùng h·ª£p trung b√¨nh (Average case):
 * 
 * Trong tr∆∞·ªùng h·ª£p trung b√¨nh, thu·∫≠t to√°n c≈©ng chia danh s√°ch th√†nh c√°c ph·∫ßn
 * g·∫ßn b·∫±ng nhau (m·∫∑c d√π kh√¥ng ho√†n to√†n ƒë·ªÅu ƒë·∫∑n nh∆∞ trong tr∆∞·ªùng h·ª£p t·ªët nh·∫•t).
 * ƒê·ªô ph·ª©c t·∫°p trong tr∆∞·ªùng h·ª£p trung b√¨nh v·∫´n l√† O(n log n).
 * Tr∆∞·ªùng h·ª£p x·∫•u nh·∫•t (Worst case):
 * 
 * Tr∆∞·ªùng h·ª£p n√†y x·∫£y ra khi thu·∫≠t to√°n kh√¥ng chia ƒë∆∞·ª£c danh s√°ch th√†nh c√°c ph·∫ßn
 * t∆∞∆°ng ƒë·ªëi ƒë·ªÅu, v√≠ d·ª• khi ta ch·ªçn pivot lu√¥n l√† ph·∫ßn t·ª≠ l·ªõn nh·∫•t ho·∫∑c nh·ªè
 * nh·∫•t, d·∫´n ƒë·∫øn m·ªôt trong c√°c ph√¢n ƒëo·∫°n lu√¥n c√≥ ƒë·ªô d√†i b·∫±ng
 * ùëõ
 * ‚àí
 * 1
 * n‚àí1.
 * Khi ƒë√≥, thu·∫≠t to√°n s·∫Ω ph·∫£i th·ª±c hi·ªán nhi·ªÅu l·∫ßn ph√¢n t√°ch g·∫ßn nh∆∞ li·ªÅn k·ªÅ v·ªõi
 * m·ªôt d√£y ƒë√£ ƒë∆∞·ª£c s·∫Øp x·∫øp (ho·∫∑c g·∫ßn nh∆∞ s·∫Øp x·∫øp), khi·∫øn ƒë·ªô ph·ª©c t·∫°p tr·ªü th√†nh
 * O(n¬≤).
 */